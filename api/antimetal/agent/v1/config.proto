// Antimetal API definitions
// Copyright Antimetal, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";

package antimetal.agent.v1;

import "antimetal/types/v1/object.proto";

// ConfigError represents an error that occurred during configuration processing.
// This error type is used to indicate problems with configuration objects
// such as validation failures, missing required fields, or invalid values.
message ConfigError {
  // config_ref is a reference to the configuration object that caused the error.
  antimetal.types.v1.ObjectRef config_ref = 1;

  // reason provides a human-readable explanation of what went wrong with the configuration.
  string reason = 2;
}

// HostStatsCollectionConfig configures collection of host system statistics.
// This configuration specifies which system collector to enable and its
// collection parameters.
message HostStatsCollectionConfig {
  // collector specifies which system statistics collector to configure.
  string collector = 1;

  // interval specifies the collection interval in seconds if applicable
  uint32 interval_seconds = 2;
}

// ProfileCollectionConfig configures eBPF-based CPU profiling.
// This enables continuous collection of stack traces from running processes
// using Linux perf events to analyze CPU performance and identify hotspots.
//
// Design: Single event per profiler instance for simplicity and clarity.
// To profile multiple events (e.g., cpu-cycles + cache-misses), create
// separate ProfileCollectionConfig instances with different names.
message ProfileCollectionConfig {
  // event_name specifies which perf event to sample (required).
  // Only one event per profiler instance - use multiple configs for multiple events.
  //
  // Hardware events (require PMU access, bare metal only):
  //   - "cpu-cycles": Hardware CPU cycles (recommended for bare metal)
  //   - "instructions": Instructions retired
  //   - "cache-misses": Last-level cache misses
  //   - "branch-misses": Branch mispredictions
  //
  // Software events (work in VMs and containers):
  //   - "cpu-clock": Virtual CPU time (recommended for VMs)
  //   - "task-clock": Task clock time
  //   - "page-faults": Page fault events
  //
  // Event must be available on target system. Hardware events require bare metal
  // with PMU access; VMs should use software events.
  string event_name = 1;

  // sample_period specifies how often to capture stack traces.
  // For hardware events: sample every N cycles (e.g., 1000000 = every 1M cycles)
  // For software events: sample every N nanoseconds (e.g., 10000000 = every 10ms)
  //
  // Default if unset: 1000000 for hardware events, 10000000 for software events
  uint64 sample_period = 2;

  // interval_seconds specifies how often to aggregate and emit profile data.
  // Profiles are collected continuously and aggregated over this interval
  // before being emitted as ProfileStats events.
  //
  // Default: 60 seconds
  uint32 interval_seconds = 3;

  // max_stack_depth limits the depth of captured stack traces.
  // Range: 1-64, Default: 64
  //
  // Lower values reduce memory/CPU overhead but may miss deep call chains.
  // Most application stacks are < 30 frames deep.
  // Note: Currently not implemented - reserved for future use.
  uint32 max_stack_depth = 4;

  // process_filters limits profiling to specific processes (optional).
  // If empty, profiles all processes system-wide.
  // Filter matches against process command name from /proc/[pid]/comm.
  //
  // Example: ["nginx", "postgres", "java"]
  // Note: Currently not implemented - reserved for future use.
  repeated string process_filters = 5;
}
